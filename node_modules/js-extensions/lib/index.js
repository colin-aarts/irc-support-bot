// Generated by IcedCoffeeScript 1.3.3e
(function() {
  'use strict';

  var js;

  js = {
    create_uuid: function(prefix) {
      var uuid;
      if (prefix == null) prefix = '';
      uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
      return prefix + uuid;
    },
    str_reverse: function(str) {
      var ary;
      if (typeof str !== 'string') return str;
      ary = str.split('');
      ary = ary.reverse();
      str = ary.join('');
      return str;
    },
    str_truncate: function(str, start, end, delimiter) {
      if (delimiter == null) delimiter = '';
      if (!(start != null) && !(end != null)) return str;
      if (start == null) start = 0;
      if (end == null) end = 0;
      if (str.length > (start + end)) {
        return (str.substr(0, start)) + delimiter + (str.substr(-end, end));
      } else {
        return str;
      }
    },
    parse_query_string: function(str) {
      var data, pair, segment, _i, _len, _ref;
      data = {};
      if (str[0] === '?') str = str.slice(1);
      if (!str) return data;
      _ref = str.split('&');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        pair = segment.split('=');
        data[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }
      return data;
    },
    "typeof": function(obj) {
      var type;
      type = Object.prototype.toString.call(obj);
      type = type.match(/\[\w+ (\w+)\]/);
      type = type[1].toLowerCase();
      if (type === 'null' || type === 'undefined') return 'null';
      if (type === 'htmlcollection' || type === 'nodelist') return 'collection';
      if (/element$/.test(type)) return 'element';
      return type;
    },
    extend: function(target) {
      var arg, args, key, value, varargs, _i, _len;
      args = js.array_from(arguments);
      varargs = args.slice(1);
      if (!varargs.length) return target;
      for (_i = 0, _len = varargs.length; _i < _len; _i++) {
        arg = varargs[_i];
        for (key in arg) {
          value = arg[key];
          target[key] = value;
        }
      }
      return target;
    },
    obj_to_query_string: function(obj) {
      var key, pairs, value;
      if (typeof obj !== 'object') return;
      pairs = [];
      for (key in obj) {
        value = obj[key];
        pairs.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)));
      }
      return pairs.join('&');
    },
    array_from: function(obj) {
      if (!(obj != null)) return [];
      if ((js["typeof"](obj)) === 'array') return obj;
      if (obj.length && (js["typeof"](obj)) !== 'string') {
        return Array.prototype.slice.call(obj);
      }
      return [obj];
    },
    re_escape: function(str) {
      if (typeof str !== 'string') return str;
      return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
  };

  module.exports = js;

}).call(this);
